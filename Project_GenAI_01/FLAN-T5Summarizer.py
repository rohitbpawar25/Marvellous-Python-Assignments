########################################################
# Required Python Packages
########################################################

import os
os.environ["TOKENIZERS_PARALLELISM"] = "false"

from transformers import AutoTokenizer, AutoModelForSeq2SeqLM

####################################################################
# Load FLAN-T5 Model and Tokenizer
####################################################################

MODEL_NAME = "google/flan-t5-small"
print(f"Loading model: {MODEL_NAME}")
tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
model = AutoModelForSeq2SeqLM.from_pretrained(MODEL_NAME)

####################################################################
# Generate_Test: Generate text using FLAN-T5
# Input:
#   prompt (str): Text prompt for FLAN-T5
#   max_new_tokens (int): Maximum tokens to generate
# Output:
#   result (str): Generated text
####################################################################

def Generate_Test(prompt: str, max_new_tokens: int = 128) -> str:
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True)
    outputs = model.generate(
        **inputs,
        max_new_tokens=max_new_tokens,
        do_sample=True,
        temperature=0.7
    )
    return tokenizer.decode(outputs[0], skip_special_tokens=True).strip()

####################################################################
# Summarize_Test: Summarize input text into 4â€“6 bullet points
# Input:
#   text (str): Text to summarize
# Output:
#   summary (str): Summary in bullet points
####################################################################

def Summarize_Test(text: str) -> str:
    prompt = f"Summarize the following text in 4-6 bullet points:\n\n{text}"
    return Generate_Test(prompt, max_new_tokens=160)

####################################################################
# Load_Context: Load context from local file
# Input:
#   path (str): Path to context file (default: "context.txt")
# Output:
#   context (str): Text from file or empty string if not found
####################################################################

def Load_Context(path: str = "context.txt") -> str:
    try:
        with open(path, "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        return ""

###################################################################
# Answer_From_Context: Answer question using ONLY the provided context
# Input:
#   question (str): Question to answer
#   context (str): Text context to use for answering
# Output:
#   answer (str): Generated answer or "Not found" if not in context
####################################################################

def Answer_From_Context(question: str, context: str) -> str:
    if not context.strip():
        return "Context file not found or empty. Create 'context.txt' first."
    prompt = (
        "You are a helpful assistant. Answer the question ONLY using the context.\n"
        "If the answer is not in the context, reply exactly: Not found.\n\n"
        f"Context:\n{context}\n\n"
        f"Question: {question}\nAnswer:"
    )
    return Generate_Test(prompt, max_new_tokens=120)

########################################################
# Main Execution 
# Case Study : FLAN-T5 Summarizer & Q&A Assistant
# Author: Rohit Pawar
# Date: 17-09-2025
########################################################

def main():

    print("-" * 90)
    print("FLAN-T5 Summarizer & Q&A Assistant Model".center(90))
    print("Author: Rohit Pawar".center(90))
    print("Date: 17-09-2025".center(90))
    print("-" * 90)
    print("1. Summarize the data")
    print("2. Questions & Answers over local context.txt")
    print("0. Exit")
    print("-" * 90)

    while True:
        choice = input("\nChoose an option (1/2/0): ").strip()
        if choice == "0":
            print("Thank you for using FLAN-T5 Model")
            break

        elif choice == "1":
            print("You have selected Summarisation option...")
            print("\nPaste text to summarize. End with a blank line:")
            lines = []
            while True:
                line = input()
                if not line.strip():
                    break
                lines.append(line)
            text = "\n".join(lines).strip()
            if not text:
                print(" FLAN-T5 Model says : No text received.")
                continue
            print("\nSummary generated by FLAN model : ")
            print(Summarize_Test(text))

        elif choice == "2":
            ctx = Load_Context("context.txt")
            if not ctx.strip():
                print("Missing 'context.txt'. Create it in the same folder and try again.")
                continue
            q = input("\nAsk a question about your context to FLAN model : ").strip()
            if not q:
                print("No question received.")
                continue
            print("\nAnswer from FLAN model : ")
            print(Answer_From_Context(q, ctx))

        else:
            print("Please choose 1, 2, or 0.")

####################################################################
# Run Main
####################################################################
if __name__ == "__main__":
    main()
